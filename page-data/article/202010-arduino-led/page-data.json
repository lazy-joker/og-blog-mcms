{"componentChunkName":"component---src-templates-blog-article-js","path":"/article/202010-arduino-led","result":{"data":{"microcmsArticles":{"title":"Arduino UNOでフルカラーLED七変化","body":"<h2 id=\"hc77b57de51\">あらまし</h2><p>家にある引き出しを漁っていたら、フルカラーLEDを見つけました。<br>このフルカラーLEDをArduino UNOのPWMで光らせれば楽しくなると考え、久しぶりに<br>Arduinoのスケッチを書いてみました。<br></p><h2 id=\"h71f6a51d2d\">ArduinoとArduino UNO</h2><p><a href=\"https://ja.wikipedia.org/wiki/Arduinohttps://ja.wikipedia.org/wiki/Arduino\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipediaの記事</a>による説明では、Arduinoはハードウェアの名称でもあり、開発ソフトウェアや<br>それらを含むコミュニティだとも言われています。<br><br><a href=\"https://www.arduino.cc/\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino公式サイト</a>ではArduinoという名称のハードウェア(コントローラー基板など)を<br>販売してたり、Arduino IDEという開発環境を配布していたりします。<br>その周りに、Arduino IDEをサポートする他社のコントローラーキット (ESP32やSTM32 Nucleo)が存在しています。<br>ESP32, STM32などのマイコンはArduino IDE以外の開発ツールが使えますが、<br>間違いなくArduinoのコミュニティに参画していると言えるでしょう。<br><br>Arduino UNOはArduinoの公式ハードウェアとして最も一般的なもので、<br>16MHzで動く8ビットマイコンのAVR ATmega328Pを搭載しています。<br>また、32kBのフラッシュメモリと2kBのSRAMを搭載しています。<br><br>Arduinoが搭載しているマイコンや記憶素子ではRaspberry PiのようにPC用のOSを動かすことはできませんが、<br>ArduinoはI2CやSPI, UARTといったシリアル通信インターフェース、A&#x2F;Dコンバータ、PWM、割り込み端子を備えています。<br>電子回路をつなげてソフトウェアで制御するという用途ではRaspberry Piにも引けを取らない可能性があり、<br>低消費電力、低発熱に関して言えばRaspberry Piよりもはるかに優位です。<br></p><h2 id=\"h72576d17d2\">Arduino開発環境の用意</h2><p><br>まず<a href=\"https://www.arduino.cc/en/Main/Software\" target=\"_blank\" rel=\"noopener noreferrer\">Arduino公式サイトのダウンロードページ</a>からArduino IDEをダウンロード、インストールします。<br>(ページ内の「Download the Arduino IDE」の見出しのところです。)<br><br>Arduino IDEのインストールが終わったら、Arduino IDEを起動します。<br><br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-10%2011.00.21.png\" alt><br>続いてArduino UNOをPCに接続し、仮想シリアルポートの設定を行います。<br>Arduino IDEの「ツール」メニューを開き、ボード一覧から「Arduino UNO」を指定します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-10%2011.32.58.png\" alt><br><br>Arduinoが接続されているシリアルポートを一覧から選択します。<br>「ツール」メニューの「シリアルポート」から、ポートの名前を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-10%2011.34.47.png\" alt><br></p><h2 id=\"h8a3c9ab4de\">ArduinoとLEDの接続</h2><p><br>いったんArduino UNOのボードをPCから外して、<br>以下の回路図の通りに、ArduinoとフルカラーLED, 330オーム抵抗器を接続します。<br><br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/schematic.png\" alt><br><br>今回使用したフルカラーLEDはアノードコモン (プラス側の端子が3色で共通) タイプで、<br>抵抗器は330オームのものを使っています。<br></p><h2 id=\"h5d97efe071\">Arduinoのスケッチ</h2><p><br>スケッチのソースコード全体は<a href=\"https://github.com/lazy-joker/arduino/blob/master/sketch_led/sketch_led.ino\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>にあります。<br>以下はソースコード内の要点になります。<br></p><h3 id=\"h01855d166c\">RGBとHSV</h3><p><br>今回の目論見として、色合いを<br>赤→橙色→黄色→緑→青緑色→青→紫色→赤<br>の順番で1巡させながら、明るさを一定に保つような<br>動作をさせます。<br><br>このような動作をさせるために、スケッチ内で<br><a href=\"https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93\" target=\"_blank\" rel=\"noopener noreferrer\">HSV (Hue-Saturation-Value)</a>という色の表現方法を使用します。<br>HSVは手短に言えば色の色相 (色合い)を0°以上360°未満の角度で表し<br>S(彩度)とV(明るさ)を一定にしながら、H(色相)をインクリメントしていきます。<br><br>一方フルカラーLEDの調光はRGBですので、HSVの値をRGBの値に変換する処理が必要です。<br><br>HSV→RGBの変換では、WikipediaのHSV色空間の記事にもあるとおり、<br>Hの値が60°変わるごとに場合分け処理をする必要があります。<br><br>Arduino言語で実装すると、以下のようになります。<br>(コード内のhueが色相 (HSVのうちのH)で、r,g,bが変換後のRGB値です)<br></p><pre><code>\n    if (hue &lt;= 60) {\n      r = 255;\n      g = hue * 255 &#x2F; 60;\n      b = 0;\n    }\n    else if (hue &lt;= 120) {\n      r = (120 - hue) * 255 &#x2F; 60;\n      g = 255;\n      b = 0;\n    }\n    else if (hue &lt;= 180) {\n      r = 0;\n      g = 255;\n      b = (hue - 120) * 255 &#x2F; 60;\n    }\n    else if (hue &lt;= 240) {\n      r = 0;\n      g = (240 - hue) * 255 &#x2F; 60;\n      b = 255;\n    }\n    else if (hue &lt;= 300) {\n      r = (hue - 240) * 255 &#x2F; 60;\n      g = 0;\n      b = 255;\n    }\n    else {\n      r = 255;\n      g = 0;\n      b = (360 - hue) * 255 &#x2F; 60;\n    }</code></pre><p>(上記のコードではS=100%, V=100%で一定を前提に作っています。<br> S,Vの値が100%以外の値を取りうる場合は、コード内の数式がもう少し複雑になります。)<br></p><h3 id=\"hf4e9abd19e\">PWM出力による調光</h3><p><br><a href=\"https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%AB%E3%82%B9%E5%B9%85%E5%A4%89%E8%AA%BF\" target=\"_blank\" rel=\"noopener noreferrer\">PWM(パルス幅変調)</a>とは、一定周期の矩形波(方形波)を出力しながら<br>矩形波のHIGHレベルを出力している長さの割合(デューティ比)を<br>入力(アナログ信号や数値)によって変化させる動作です。<br><br>Arduinoでは5つのディジタル出力端子でPWM動作をすることができ、<br>各々のPWMの入力値はプログラム中のanalogWrite()関数で指定します。<br><br>analogWrite()は0〜255の範囲で入力値を受け付け、<br>入力が0のとき常にLOW(0V)を出力、入力が255のとき常にHIGH(+5V)を出力します。<br>0〜255の間の値では「入力×100&#x2F;255」[%] のデューティ比で矩形波を出力します。<br><br>ここで一つ注意が必要なのは、<br>今回のLED接続ではPWM出力は負論理になることです。<br>つまり、PWM出力がHIGHのときはLEDは光らず<br>PWM出力がLOWのときだけLEDが光ります。<br><br>そのため、analogWrite()で指定するPWM出力レベルは、<br>以下のように255からRGB値を引いた数とします。<br></p><pre><code>    analogWrite(3, 255 - r);\n    analogWrite(5, 255 - g);\n    analogWrite(6, 255 - b);  </code></pre><p><br></p><h2 id=\"h75b359be50\">実際に光らせてみた</h2><p>スケッチのコードをArduino IDEに入力して書き込みボタンを押すと<br>Arduino UNO基板上でプログラムが動作し始めます。<br><br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-10%2013.58.04.png\" alt><br><br><br>実際に光らせたときの動画は<a href=\"https://twitter.com/wannabee1985/status/1309736379337768960\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>で公開しています。<br></p><h2 id=\"ha214098e44\">まとめ</h2><p>この記事では</p><ul><li>Arduinoの概要</li><li>Arduino IDEのインストール</li><li>ArduinoUNOとの接続セットアップ</li><li>フルカラーLEDを調光するスケッチ作成と実行</li></ul><p>について述べました。<br><br>ArduinoのPWM出力はLEDの調光以外にも<br>モーターの制御など様々な用途があります。<br><br>今回は取り上げませんでしたが、Arduinoにはシールドという<br>拡張基板がサードパーティにより設計・製造されております。<br>(<a href=\"https://akizukidenshi.com/catalog/c/carduino2/\" target=\"_blank\" rel=\"noopener noreferrer\">秋月電子</a>、<a href=\"https://www.switch-science.com/catalog/list/42/\" target=\"_blank\" rel=\"noopener noreferrer\">スイッチサイエンス</a>などのオンライン店舗でも販売されています)<br>  (秋月電子のページでセッションのエラーが起きた場合はブラウザで再読み込みしましょう)<br><br>シールドには通信インターフェースの追加やモーターの駆動など<br>様々な機能を提供しています。これらシールドによる拡張性も<br>Arduinoプラットフォームの大きな特長と言えるでしょう。<br></p><h3 id=\"h727521698e\">おっさんの小言 : 昔は大変だった</h3><p><br>Arduino以前のマイコン開発では、マイコンを動作させるための回路と<br>制御対象の周辺回路は一括で、一品ものとして作るのが主でした。<br><br>マイコンの書き込みも、一旦書き込み専用回路(ROMライタ)に<br>マイコンチップを載せ替えてから書き込みを行い、<br>その後また基板を載せ替えて動かす場合も多かったのです。<br><br>今のように試しに動かしてみながら微修正を加えていくようなことは、<br>当時はひどく面倒で非現実的だったのです。<br>(2000年代前半のPICやH8の制作例を見れば、当時の電子工作趣味人の苦労が偲ばれるでしょう。)<br><br>私見ですがArduinoの登場した頃になってから、マイコンの周辺回路と<br>制御対象を「別々のモジュールとして作り」「組み合わせて」<br>使うことが一般的になったように思えます。<br>この流れのおかげで、マイコン電子工作は昔よりも<br>非常に容易に、手軽に試せるものになりました。<br><br>ソフトウェアの世界のように、PCさえあれば<br>大抵何でもできるというほどではありません。<br>しかしながら高度な専門知識を持った人が<br>工具一式を揃えて初めてスタートラインに立てる、<br>というようなものではなくなりました。<br></p>","slug":"202010-arduino-led","publishedAt":"2020年10月10日","writer":"Oganesson","tags":[{"name":"ハードウェア","slug":"hardware"}]}},"pageContext":{"slug":"202010-arduino-led"}},"staticQueryHashes":["272570591","3000541721","3649515864"]}