{"componentChunkName":"component---src-templates-blog-article-js","path":"/article/202010-raspi-bot","result":{"data":{"microcmsArticles":{"title":"Raspberry PiでDiscordボットを作る(2) センサの接続とボットプログラムの作成","body":"<h2 id=\"hc77b57de51\">あらまし</h2><p><a href=\"https://proactive-cybernetics.netlify.app/article/202009-raspi-os\" target=\"_blank\" rel=\"noopener noreferrer\">前回の記事</a>でRaspberry Piにリモートログインができるようになったところから、<br>本格的にRaspberry Piらしいことをしていこうと思います。<br><br>今回は、Raspberry PiでI2C接続のセンサから測定値を読み取る方法と、<br>センサから読み取った測定値をチャットサービス(<a href=\"https://discord.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a>)に投稿するボットを作る方法を説明します。<br></p><h2 id=\"hfb91fd38fa\">I2C環境センサについて</h2><p>I2Cとは、<a href=\"https://ja.wikipedia.org/wiki/I2C\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipediaの記事</a>にあるように1つのコントローラ(マイコンなど)と、1個または多数の周辺機器を接続する<br>シリアル式のバス接続規格です。<br>I2Cは「アイ・スクェアド・シー」または「アイ・トゥ・シー」と読まれることが多いです。<br><br>今回使うI2C接続のセンサとして、<a href=\"https://akizukidenshi.com/catalog/g/gK-14469/\" target=\"_blank\" rel=\"noopener noreferrer\">Boshe BME680環境センサ</a>を購入しました。<br>このセンサでは温度と湿度、気圧の測定が行えます。<br><br>秋月電子の通販で買ったものではセンサ素子の乗った基板とブレッドボードに挿せるピンヘッダが付属していましたが、<br>自分でピンヘッダを基板にはんだ付けする必要がありました。<br>(はんだ付けの技術については、本記事では割愛します。)<br></p><h2 id=\"h3ea3cca820\">Raspberry PiでI2Cを有効化する</h2><p>Raspberry PiのI2Cはデフォルトで無効になっていますので、有効化の設定を行います。<br><br>まず、aptパッケージマネージャでi2c-toolsパッケージをインストールします。</p><pre><code>sudo apt install i2c-tools</code></pre><p><br>次に、raspi-configツールからi2cの設定を有効にします。</p><pre><code>sudo raspi-config</code></pre><p><br>raspi-configのメニュー画面から、矢印キーで「5 Interfacing Options」を選択してEnterキーを押します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-07%2021.52.31.png\" alt><br><br>Interfacing Optionsのメニューに入るので、「P5 I2C」を選択してEnterキーを押します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-07%2021.55.15.png\" alt><br><br>「はい」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-07%2021.55.57.png\" alt><br><br>I2Cが有効化された旨が表示されます。raspi-configのメニューから「Finish」でメニューを閉じて次に進みます。<br></p><h2 id=\"h9142ef6055\">Raspberry Piにセンサを接続</h2><p><br>まず、Raspberry Piの電源を切ります。</p><pre><code>sudo shutdown -h now</code></pre><p>コマンドを実行し、しばらくしたら電源用USBケーブルをRaspberry Pi本体から引き抜きます。<br><br>Raspberry Piのピンヘッダに、環境センサの各端子をジャンパワイヤで接続します。<br><br>Raspberry Pi    環境センサ<br>+5V (2)         ---        VIN (1)　(※ カッコ内はピン番号)<br>SCL (5)         ---        SCL (2)<br>SDA (3)         ---        SDA (3)<br>GND (6)         ---        GND (4)<br><br>接続ができたら、Raspberry Piに電源用USBを挿入して起動します。<br>Raspberry Piが起動したら、PCからSSHでRaspberry Piにログインします。<br></p><h2 id=\"h0e869fb9b5\">センサの動作確認</h2><p>再起動とログインができたら、i2cdetectコマンドを実行します。<br>以下のように「77」(BME680のI2Cアドレス) が表示されればセンサが接続できています。</p><pre><code>$ sudo i2cdetect -y 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- -- \n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n70: -- -- -- -- -- -- -- 77</code></pre><p><br>続いて、Pythonプログラムからセンサの値を読み取ってみましょう。<br></p><pre><code>git clone https:&#x2F;&#x2F;github.com&#x2F;pimoroni&#x2F;bme680-python.git\ncd bme680-python&#x2F;examples\nsudo pip3 install bme680\npython3 read-all.py</code></pre><p><br>以下のようにセンサから取得した値が表示されれば成功です。<br>(出力は一例です。数値はセンサの物理的環境によって異なります。)</p><pre><code>$ python3 read-all.py \nread-all.py - Displays temperature, pressure, humidity, and gas.\n\nPress Ctrl+C to exit!\n\n(中略)\n\nPolling:\n25.25 C,1014.70 hPa,70.11 %RH\n25.26 C,1014.71 hPa,70.07 %RH,3712.5851520667234 Ohms\n25.30 C,1014.73 hPa,70.00 %RH,6040.203089121114 Ohms\n25.33 C,1014.71 hPa,69.91 %RH,8579.990372223523 Ohms\n25.37 C,1014.70 hPa,69.83 %RH,11141.141109863216 Ohms</code></pre><p><br>キー割り込み(Ctrl-c)操作でスクリプトの実行を停止します。<br><br>ここまで出来たら、いよいよI2Cセンサの測定値をつぶやくDiscordボットの作成に入ります。<br></p><h2 id=\"h37245156f0\">Discordボットの作成 : 自分専用サーバーの作成とボットの登録</h2><p>Discordボットを動かすための、自分専用のサーバーを作ります。<br><br>まず、Discordアプリを開いて「サーバーを追加」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-06%2022.15.09.png\" alt><br><br>「サーバーを作成」画面で「Create my own」を選びます。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-06%2022.16.53.png\" alt><br><br><br>サーバー名を入力し、「新規作成」を押します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-06%2022.18.17.png\" alt><br></p><h3 id=\"h830f7115b8\">Discordサーバーにボットを招待する</h3><p>あとは、新しく作ったサーバーにボットを招待します。<br><a href=\"https://discordpy.readthedocs.io/ja/latest/discord.html\" target=\"_blank\" rel=\"noopener noreferrer\">discord.pyの公式サイト</a>にボットのアカウント作成方法がありますので、ページに示された手順に従って<br>ボットのOAuth設定と、ボットのサーバーに対する権限の設定を行います。<br>権限を適切に設定しないと、ボットがサーバーに投稿しない、もしくはボットがユーザーの投稿に反応できないことがありますので注意しましょう。<br><br>Discordのサイトの、ボットの設定ページ内にあるボットのトークンを控えておきます。<br><br>また、ボットが投稿するためのチャンネルを作成し、作成したチャンネルのIDを控えておきます。<br>チャンネルのIDは<a href=\"https://support.discord.com/hc/ja/articles/206346498-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8ID%E3%81%AF%E3%81%A9%E3%81%93%E3%81%A7%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%89%E3%82%8C%E3%82%8B-\" target=\"_blank\" rel=\"noopener noreferrer\">こちら</a>に記された手順で確認できます。<br></p><h2 id=\"h22b6b12c88\">DiscordボットのためのPythonの設定</h2><p>venvによるPythonの仮想環境を作成し、その中でPIPパッケージのインストールを行います。<br>まず、作業用ディレクトリを作成します。</p><pre><code>mkdir ~&#x2F;work&#x2F;discordbot\ncd ~&#x2F;work&#x2F;discordbot</code></pre><p><br>作業用ディレクトリに入ったら、venvコマンドでPythonの仮想環境を作ります。</p><pre><code>python3 -m venv .\nsource bin&#x2F;activate</code></pre><p><br>activateスクリプトを呼び出すとプロンプトの形が変わります。<br>この状態で、pipコマンドでパッケージを導入します。<br>導入するパッケージはbme680 (I2C環境センサの制御)と、discord.py (Discordボット用ライブラリ)です。</p><pre><code>pip install bme６８０\npip　install discord.py</code></pre><p><br>「.env」隠しファイルを作成し、その中にボットのトークンと投稿先チャネルのIDを含めます。</p><pre><code>touch .env\necho BOT_TOKEN=*********************** &gt;&gt; .env\necho SANDBOX_CHANNEL_ID=******** &gt;&gt; .env</code></pre><p><br>.envファイルはくれぐれもリポジトリにコミットしないようにしましょう。<br>Gitを使っていれば、.gitignoreファイルに「.env」を追加します。</p><pre><code>echo .env &gt;&gt; .gitignore</code></pre><p><br></p><h2 id=\"haddfa43deb\">ボットの実装</h2><p>ボットをPythonプログラム (example_bot.py)で実装します。</p><pre><code>import discord\nfrom discord.ext import tasks\nimport bme680tph\n\t\n# 環境設定 (.env　ファイル) 用\nimport os\nfrom os.path import join, dirname\nfrom dotenv import load_dotenv\n\t\n@client.event\nasync def on_ready():\n    print (&#x27;We have logged in as {0.user}&#x27;.format(client))\n    await client.get_channel(sandbox_channel_id).send(&#x27;こんにちは&#x27;)\n\n@client.event\nasync def on_message(message):\n    print(&#x27;on_message:{0}&#x27;.format(message.content));\n    if message.author.bot:\n        return\n    if message.content.startswith(&#x27;$hello&#x27;):\n        await message.channel.send(&#x27;よぅ!&#x27;)\n    if message.content.startswith(&#x27;$室温&#x27;):\n        await message.channel.send(bme680tph.get_sensor())\n\nif __name__ == &quot;__main__&quot;:\n　　　　load_dotenv(verbose=True)\n　　　　sandbox_channel_id = int(os.environ.get(&quot;SANDBOX_CHANNEL_ID&quot;))\n　　　　bot_token = os.environ.get(&quot;BOT_TOKEN&quot;)\n\n　　　　client = discord.Client()\n    client.run(bot_token)</code></pre><p><br>見ての通り、プログラムは、「@client.event」デコレータがつけられた2つの関数と<br>「if __name__==&quot;__main__&quot;:」ブロックからなります。<br><br>on_ready関数はdiscord.pyで作成したclient(ボット)がDiscordサーバーに正常に接続できた時に呼び出され、<br>on_message関数はclientが接続しているサーバーに誰かが投稿した時に呼び出されるコールバック関数です。<br><br>「if __name__==&quot;__main__&quot;:」直後の3行は.envファイルから設定(投稿先のチャンネルIDとボットのトークン)<br>を読み出す処理です。<br>最後の2行でclientを作成し、ボットの動作を開始しています。<br><br><br>センサーから気温、湿度と気圧を取得する手続きを記した<br>bme680tph.py ファイルを作成し、example_bot.pyと同じディレクトリに置きます。<br>このbme680tph.pyはpimoroni氏の提供によるライブラリ(<a href=\"https://pypi.org/project/bme680/\" target=\"_blank\" rel=\"noopener noreferrer\">PyPI bme680モジュール</a>) を使用して作成しています。<br></p><pre><code>import bme680\n\ntry:\n    sensor = bme680.BME680(bme680.I2C_ADDR_PRIMARY)\nexcept IOError:\n    sensor = bme680.BME680(bme680.I2C_ADDR_SECONDARY)\n\t\n\n# These oversampling settings can be tweaked to\n# change the balance between accuracy and noise in\n# the data.\t\n\nsensor.set_humidity_oversample(bme680.OS_2X)\nsensor.set_pressure_oversample(bme680.OS_4X)\nsensor.set_temperature_oversample(bme680.OS_8X)\nsensor.set_filter(bme680.FILTER_SIZE_3)\n\t\n\ndef get_sensor():\n    if sensor.get_sensor_data():\n        output = &quot;&quot;&quot;温度 : {0:.2f} [°C],\n気圧 : {1:.2f} [hPa],\n湿度 : {2:.3f} [%RH]&quot;&quot;&quot;.format(\n            sensor.data.temperature,\n            sensor.data.pressure,\n            sensor.data.humidity)\n        return(output)</code></pre><p><br>このプログラムを実行し、Discordアプリからボットの投稿用チャネルを開いて<br>「こんにちは」と投稿されていることを確認します。</p><pre><code>python3 example_bot.py</code></pre><p><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-06%2022.48.04.png\" alt><br><br>また、「$hello」と投稿して、ボットが「よぅ!」と返事すること、<br>「$室温」を投稿して、ボットが気温と湿度、気圧を応答することを確認します。<br>もしボットによる投稿が確認できなかったら、ボットを起動したターミナルにエラー出力がないか確認します。<br>(なお私はon_message関数のスペルを1文字間違えたためにボットが応答せず、数時間もの間苦悶の表情を浮かべて「どおしてだよおぉぉ」と唸っていました。)<br><br>動作確認ができたら一回ボットを停止します。ボットはキーボード割り込み(Ctrl-c)で停止します。<br></p><h3 id=\"h40ea9a7213\">一定時間ごとに定期投稿する</h3><p><br>次に、ボットに手続きを追加して、1時間ごとに気温と湿度、気圧を投稿するようにします。<br>example_bot.pyに新しく関数loopを追加します。<br></p><pre><code>@tasks.loop(seconds=60)\nasync def loop():\n    # 現在の時刻 : 00分のときのみセンサの値を送信\n　   print(datetime.now().strftime(&#x27;%H:%M&#x27;))\n    if datetime.now().strftime(&#x27;%M&#x27;) == &#x27;00&#x27;:\n        await client.get_channel(sandbox_channel_id).send(&#x27;定期送信\\n&#x27;+bme680tph.get_sensor())</code></pre><p><br>関数loopに付けられたtasks.loopデコレータは、loop関数を一定時間ごとに実行するために付けています。<br>毎時00分に、bme680tph.pyの関数を呼び出して気温と湿度、気圧を投稿します。<br><br>続いて、clientの開始直後にloop関数の周期実行を開始させます。<br>example_bot.pyの末尾にloop.start()を追加します。</p><pre><code>    client = discord.Client()\n    client.run(bot_token)\n    loop.start()</code></pre><p><br>定期実行が正しく行われれば、1時間ごとに「定期送信」で始まる投稿がされるようになります。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-07%2022.10.16.png\" alt><br></p><h2 id=\"ha214098e44\">まとめ</h2><p><a href=\"https://proactive-cybernetics.netlify.app/article/202009-raspi-os\" target=\"_blank\" rel=\"noopener noreferrer\">第1回</a>と本記事で、以下の内容を取り上げました。<br><br>第1回</p><ul><li>Raspberry Pi OSについて<ul><li>Raspberry Pi OSイメージのダウンロードと検証</li><li>Raspberry Pi OSイメージのmicroSDへの書き込み</li><li>Raspberry Piの起動</li></ul></li><li>Raspberry Piのネットワークログイン設定<ul><li>マルチキャストDNSの導入</li><li>SSHの有効化</li></ul></li></ul><p><br>第2回</p><ul><li>I2C接続のセンサについて</li><li>I2C接続のセンサをPythonプログラムから使う</li><li>Discord.pyによるボットの作成<ul><li>ボットが定期投稿を行うようにする</li></ul></li><li>Discordサーバーの新規作成とボットの招待</li></ul><p><br>次回はやるかどうか未定ですが、出来たらHeroku上のカスタムサーバに<br>センサの測定値を定期的に送信して、気温・湿度と気圧のグラフをWebブラウザから確認できるようにしたい<br>などと考えております。<br></p>","slug":"202010-raspi-bot","publishedAt":"2020年10月7日","writer":"Oganesson","tags":[{"name":"ハードウェア","slug":"hardware"},{"name":"IoTデバイス","slug":"iot-device"}]}},"pageContext":{"slug":"202010-raspi-bot"}},"staticQueryHashes":["272570591","3000541721","3649515864"]}