{"componentChunkName":"component---src-templates-blog-article-js","path":"/article/202009-making-new-blog","result":{"data":{"microcmsArticles":{"title":"メイキング・オブ・新ブログ","body":"<p>本記事では、microCMS、Gatsby.jsとNetlifyを使って本ブログを作成した方法について説明します。<br><br>説明の流れは</p><ul><li>ヘッドレスCMSの選定 (いかにしてmicroCMSを使うようになったか)</li><li>microCMSのAPI設定</li><li>Gatsby.jsによるサイト構築</li><li>Netlifyによるサイトの公開</li></ul><p>となります。<br></p><h2 id=\"ha8b7adfcd5\">MicroCMSを選んだ理由</h2><p><a href=\"https://proactive-cybernetics.netlify.app/article/202009-gave-up-migration\">前回の記事</a>でWordpress製ブログの移行を断念してから、最初からヘッドレスCMSとして作られているサービスを使ってGatsby製ブログを作ろうと考えましたが、<br>その矢先「ヘッドレスCMS, 意外とたくさんある」という事実に突き当たりました。<br><br>当初、一番安牌と考えていたのはNetlify CMSでした。当初からGatsby製サイトをNetlifyで公開しようとしていたので<br>Netlifyでお膳立てされたサービスですべてを完結すれば、簡単にサイトが作れる算段です。<br>ContentfulもヘッドレスCMSの中で「鉄板」の地位を築いているように見えました。ユーザー数もノウハウの蓄積もピカイチです。<br>一方、日本発のmicroCMSというサービスがあることを聞き及んでいました。<br><br>結局、以下の2点からmicroCMSを選びました。</p><ul><li>日本語のドキュメントが整備されている</li><li>最低限必要な機能が整ったシンプルなUI</li></ul><p>とくに管理画面のUIのシンプルさはヘッドレスCMS初心者の私を安心させてくれました。<br>microCMSのリッチエディタも、Wordpressのエディタとあまり変わらない使い勝手でした。<br></p><h2 id=\"h3f2e353ce2\">microCMS APIの作成</h2><p>microCMSを使うことが決まったところで、microCMSで新規のサービスを作ります。<br>(サービスの作成方法は、<a href=\"https://microcms.io/docs/manual/create-service\" target=\"_blank\" rel=\"noopener noreferrer\">microCMSの公式マニュアル</a>を参照)<br><br>次に、microCMSで管理するコンテンツAPIを作成します。<br>当サイトのmicroCMSコンテンツでは、以下の4つのAPIについて定義を作りました。<br></p><ul><li>記事</li><li>タグ</li><li>固定ページ</li><li>リンク集</li></ul><p><br>APIを追加するには、microCMS左側の「コンテンツ(API)」の右隣の「+」をクリックします。<br>続いて「APIの基本情報を入力」画面でAPI名とエンドポイントURLを指定します。<br><br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-01%2020.41.59.png\" alt><br><br>APIの型は「リスト形式」を選択します。<br><br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-10-01%2020.42.14.png\" alt><br><br>APIの型を選択したら、最後にAPIのスキーマ(データの形式)を設定します。<br>例として、記事APIのスキーマ定義を以下に示します。<br></p><ul><li>フィールドID : title, 表示名 : タイトル, 種類 : テキストフィールド</li><li>フィールドID : summary, 表示名 : 要約, 種類 : テキストエリア</li><li>フィールドID : body, 表示名 : 本文, 種類 : リッチエディタ</li><li>フィールドID : writer, 表示名 : 著者, 種類 : テキストフィールド</li><li>フィールドID : slug, 表示名 : URIスラッグ, 種類 : テキストフィールド</li><li>フィールドID : tags, 表示名 : タグ, 種類 : 複数コンテンツ参照 - タグ</li></ul><p><br>最後のタグのフィールドがタグAPIの定義に依存しているので、記事APIにタグフィールドを追加する前にタグAPIを作っておく必要があります。<br><br>記事、タグ、固定ページ、リンク集のAPI定義を作成したら、Gatsbyでサイトを構築する作業に入ります。<br></p><h2 id=\"h47b07cf818\">Gatsbyでサイトを構築</h2><p>microCMSのAPI定義に続いて、Gatsbyでのサイト構築に入ります。<br>(現在のサイト生成コードの最新版は<a href=\"https://github.com/lazy-joker/og-blog-mcms\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>に上げています。)<br><br>gatsby-source-microcmsを使ったサイトの構築にあたり、りゅーそうさんのnote記事<br>(<a href=\"https://note.com/youheyhey0505/n/nc7fdd9de7c89\" target=\"_blank\" rel=\"noopener noreferrer\">前編</a>・<a href=\"https://note.com/youheyhey0505/n/n0593d5478a10\" target=\"_blank\" rel=\"noopener noreferrer\">後編</a>) を大いに参考にさせていただきました。<br><br>まずLinuxのコマンドラインから「gatsby new」コマンドで新規プロジェクトを作り、その上で<a href=\"https://www.gatsbyjs.com/plugins/gatsby-source-microcms/\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby-source-microcms</a>パッケージを追加します。<br></p><pre><code>gatsby new\nnpm install gatsby-source-microcms</code></pre><p><br>microCMSのコンテンツを取り込むため、<a href=\"https://github.com/lazy-joker/og-blog-mcms/blob/master/gatsby-config.js\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby-config.js</a>に<br>gatsby-source-microcmsパッケージの設定を加えます。<br></p><pre><code>    {\n\t      resolve: &quot;gatsby-source-microcms&quot;,\n\t      options: {\n\t        apiKey: process.env.MICROCMS_API,\n\t        serviceId: &quot;og-blog&quot;,\n\t        apis: [\n\t          {\n\t            endpoint: &quot;articles&quot;,\n\t          },\n\t          {\n\t            endpoint: &quot;tags&quot;,\n\t          },\n\t          {\n\t            endpoint: &quot;links&quot;,\n\t          },\n\t          {\n\t            endpoint: &quot;pages&quot;,\n\t          },\n\t        ],\n\t      },</code></pre><p><br>以下、下図のサイト構成でページを作っていきます。<br><br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/sitemap.jpeg\" alt><br></p><h3 id=\"h4fe16b8a4a\">トップページ (index)</h3><p>トップページ(<a href=\"https://github.com/lazy-joker/og-blog-mcms/blob/master/src/templates/index.js\" target=\"_blank\" rel=\"noopener noreferrer\">src/templates/index.js</a>)には、各記事の概要 (タイトル、要約、公開日、タグ) が表示されるようにしました。<br>トップページの各記事の概要のリンクから、各記事のページが見られるようにしています。<br><br>またトップページを含む全てのページの右側には、メニューバーが表示されるようにしました。<br>ページ右側のメニューバーには、ブログの扱うタグ一覧、固定ページの一覧とリンク集が表示されるようにしました。<br>(メニューバーの表示は <a href=\"https://github.com/lazy-joker/og-blog-mcms/blob/master/src/components/rightmenu.js\" target=\"_blank\" rel=\"noopener noreferrer\">src/components/rightmenu.js</a> で定義したコンポーネントを使いました。)<br></p><h3 id=\"hf8ed3c5608\">記事 (article)</h3><p><a href=\"https://github.com/lazy-joker/og-blog-mcms/blob/master/src/templates/blog-article.js\" target=\"_blank\" rel=\"noopener noreferrer\">src/templates/blog-articls.js</a>にて、各記事の詳細ページを生成しています。<br>各記事の詳細ページでは、記事本文の全文が表示されます。<br><br>各記事のURLは、microCMS側で各記事に設定しているslug (スラッグ : URLに含めるための英数字の略称) を使って</p><pre><code>&#x2F;article&#x2F;&lt;記事のslug&gt;</code></pre><p>としています。<br></p><h4 id=\"h3e69a02751\">記事のSNSシェアボタン</h4><p>この記事の下方にもありますが、SNSシェアボタン (Twitter, Line, LinkedIn, Facebook) を<br>各記事に設けています。<br>SNSシェアボタンの設置には、<a href=\"https://www.npmjs.com/package/react-share\" target=\"_blank\" rel=\"noopener noreferrer\">react-share</a>パッケージを使用しました。<br></p><h3 id=\"h45efd70457\">タグ (tag)</h3><p>microCMS側で、1つの記事に複数のタグを付けられるように設定したうえで、<br>各タグのインデックスページ</p><pre><code>&#x2F;tag&#x2F;&lt;タグのslug&gt;</code></pre><p>を作りました。<br><br>各タグのインデックスページに、該当タグの含まれるすべての記事の概要を<br>表示するようにしています。<br>各タグの情報と、各タグに対応する記事一覧を取得するGraphQLクエリは<br><a href=\"https://github.com/lazy-joker/og-blog-mcms/blob/master/src/templates/tag-index.js\" target=\"_blank\" rel=\"noopener noreferrer\">src/templates/tag-index.js</a>の変数queryの値を使って取得しています。<br></p><h3 id=\"ha7242b0a94\">固定ページ (page)</h3><p><a href=\"https://github.com/lazy-joker/og-blog-mcms/blob/master/src/templates/static-page.js\" target=\"_blank\" rel=\"noopener noreferrer\">src/templates/static-page.js</a>では、各固定ページの内容を表示するページを生成します。<br></p><h3 id=\"h5415d563f5\">サイトの動作確認</h3><p><br>作成途中での部分的な確認は</p><pre><code>gatsby develop</code></pre><p><br>を実行し、ブラウザでlocalhost:8000を開きます。<br>GraphQL絡みの修正をしない限り、jsファイルの修正はブラウザの表示に自動的に適用されます。<br>GraphQLのクエリなどを変更した場合はCtrl-cキー操作でいったんdevelop動作を抜けて、再度developを実行します。<br><br>パフォーマンステストなど本格的な確認は</p><pre><code>gatsby build\ngatsby serve</code></pre><p><br>を実行し、ブラウザでlocalhost:9000を開きます。<br></p><h3 id=\"he22bb1aa2e\">microCMSのAPI認証キーの取り扱い</h3><p>Githubにコミットする前に、microCMSのAPI認証キーを<br>Githubにコミットするコードから外し、「.env」隠しファイルでキーを管理するようにします。</p><pre><code>npm install --save dotenv</code></pre><p><br>gatsby-config.jsのapiKeyの部分を以下のように変更し、dotenvパッケージを呼び出すようにします。</p><pre><code>      apiKey: &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;,</code></pre><p>↓</p><pre><code>require(&#x27;dotenv&#x27;).config()\n\n...(中略)...\n\n      apiKey: process.env.MICROCMS_API,</code></pre><p><br>.env 隠しファイルには、APIキーを以下のように入れておきます。</p><pre><code>MICROCMS_API=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code></pre><p><br>.envファイルはリポジトリにコミットしないよう、.gitignoreの設定を忘れずしておきます。</p><pre><code>echo .env &gt;&gt; .gitignore</code></pre><p><br>GatsbyのプロジェクトをGithubにコミットしたら、Netlifyにログインします。<br></p><h2 id=\"hd6f5d00ae8\">Netlifyでサイトを公開</h2><p>作成したサイトをNetlifyで公開します。リポジトリを登録して環境変数を設定しておくだけで<br>Gatsbyで作成したサイトのビルドが始まり、数分でサイトの公開まで完了します。<br></p><h3 id=\"hdbf1dcc7cc\">リポジトリの設定</h3><p>Netlifyにログインして、「Sites」のNew site from Git」を選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-09-30%2020.26.32.png\" alt><br><br>「Github」を選択し、Gatsbyのプロジェクトのリポジトリを選択します。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-09-30%2020.28.12.png\" alt><br></p><h3 id=\"hbe726b3449\">環境変数の設定</h3><p>Githubのリポジトリの選択まで終わったら、ビルド方法の設定に入ります。<br>「Deploy site」の前に、「Show advanced」から環境変数の設定に入ります。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-09-30%2020.31.44.png\" alt><br><br>「Show advanced」を押すと「New variable」ボタンが現れるので<br>「New variable」ボタンを押して環境変数MICROCMS_APIを追加します。<br>MICROCMS_APIの値 (Value) は、.envファイルで指定したのと同じ値にします。<br><img src=\"https://images.microcms-assets.io/protected/ap-northeast-1:9e5272dd-7b4e-43ed-93af-2c67006519ff/service/og-blog/media/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202020-09-30%2020.35.58.png\" alt><br><br>最後に「Deploy site」ボタンをクリックするとNetlifyのサーバでサイトのビルドが行われます。<br>ビルドは数分で完了し、その後はNetlifyで割り当てられたサイト名でサイトが公開されます。</p>","slug":"202009-making-new-blog","publishedAt":"2020年9月30日","writer":"Oganesson","tags":[{"name":"Webフロント","slug":"web-front"}]}},"pageContext":{"slug":"202009-making-new-blog"}},"staticQueryHashes":["272570591","3000541721","3649515864"]}